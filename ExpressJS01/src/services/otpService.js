const User = require('../models/user');
const nodemailer = require('nodemailer');

class OtpService {
    constructor() {
        // C·∫•u h√¨nh email transporter (c·∫ßn c·∫≠p nh·∫≠t v·ªõi th√¥ng tin SMTP th·ª±c t·∫ø)
        this.transporter = nodemailer.createTransport({
            host: process.env.SMTP_HOST || 'smtp.gmail.com',
            port: process.env.SMTP_PORT || 587,
            secure: false,
            auth: {
                user: process.env.SMTP_USER,
                pass: process.env.SMTP_PASS
            }
        });
    }

    // T·∫°o m√£ OTP ng·∫´u nhi√™n 6 s·ªë
    generateOTP() {
        return Math.floor(100000 + Math.random() * 900000).toString();
    }

    // G·ª≠i OTP qua email
    async sendOTP(email) {
        try {
            // T√¨m user theo email
            const user = await User.findOne({ where: { email } });
            if (!user) {
                throw new Error('Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
            }

            // T·∫°o m√£ OTP m·ªõi
            const otpCode = this.generateOTP();
            const otpExpiresAt = new Date(Date.now() + 10 * 60 * 1000); // H·∫øt h·∫°n sau 10 ph√∫t

            // C·∫≠p nh·∫≠t OTP v√†o database
            await user.update({
                otpCode,
                otpExpiresAt
            });

            // G·ª¨I EMAIL TH·∫¨T
            const mailOptions = {
                from: process.env.SMTP_USER,
                to: email,
                subject: 'M√£ x√°c th·ª±c OTP',
                html: `
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                        <h2 style="color: #333;">M√£ x√°c th·ª±c OTP</h2>
                        <p>Xin ch√†o ${user.fullName},</p>
                        <p>M√£ x√°c th·ª±c OTP c·ªßa b·∫°n l√†:</p>
                        <div style="background-color: #f4f4f4; padding: 20px; text-align: center; margin: 20px 0;">
                            <h1 style="color: #007bff; font-size: 32px; margin: 0; letter-spacing: 5px;">${otpCode}</h1>
                        </div>
                        <p><strong>L∆∞u √Ω:</strong></p>
                        <ul>
                            <li>M√£ OTP c√≥ hi·ªáu l·ª±c trong 10 ph√∫t</li>
                            <li>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                            <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y</li>
                        </ul>
                        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© h·ªó tr·ª£</p>
                    </div>
                `
            };

            await this.transporter.sendMail(mailOptions);

            // T·∫†M TH·ªúI: V·∫´n log OTP ra console ƒë·ªÉ debug
            console.log(`\nüîê ==========================================`);
            console.log(`üîê OTP cho ${email}: ${otpCode}`);
            console.log(`üîê H·∫øt h·∫°n: ${otpExpiresAt.toLocaleString('vi-VN')}`);
            console.log(`üîê ==========================================\n`);

            return {
                success: true,
                message: 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n',
                expiresIn: '10 ph√∫t'
            };
        } catch (error) {
            throw error;
        }
    }

    // X√°c th·ª±c OTP
    async verifyOTP(email, otpCode) {
        try {
            // T√¨m user theo email
            const user = await User.findOne({ where: { email } });
            if (!user) {
                throw new Error('Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
            }

            // Ki·ªÉm tra OTP c√≥ h·ª£p l·ªá kh√¥ng
            if (!user.isOtpValid(otpCode)) {
                if (user.isOtpExpired()) {
                    throw new Error('M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi');
                } else {
                    throw new Error('M√£ OTP kh√¥ng ƒë√∫ng');
                }
            }

            // X√°c th·ª±c th√†nh c√¥ng, c·∫≠p nh·∫≠t tr·∫°ng th√°i
            await user.update({
                isEmailVerified: true,
                otpCode: null,
                otpExpiresAt: null
            });

            return {
                success: true,
                message: 'X√°c th·ª±c OTP th√†nh c√¥ng',
                user: {
                    id: user.id,
                    email: user.email,
                    fullName: user.fullName,
                    isEmailVerified: user.isEmailVerified
                }
            };
        } catch (error) {
            throw error;
        }
    }

    // G·ª≠i l·∫°i OTP
    async resendOTP(email) {
        try {
            // Ki·ªÉm tra xem c√≥ th·ªÉ g·ª≠i l·∫°i OTP kh√¥ng (tr√°nh spam)
            const user = await User.findOne({ where: { email } });
            if (!user) {
                throw new Error('Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
            }

            // Ki·ªÉm tra th·ªùi gian g·ª≠i OTP tr∆∞·ªõc ƒë√≥
            if (user.otpExpiresAt && new Date() < new Date(user.otpExpiresAt.getTime() + 60000)) {
                throw new Error('Vui l√≤ng ƒë·ª£i 1 ph√∫t tr∆∞·ªõc khi y√™u c·∫ßu m√£ OTP m·ªõi');
            }

            // G·ª≠i OTP m·ªõi
            return await this.sendOTP(email);
        } catch (error) {
            throw error;
        }
    }

    // Ki·ªÉm tra tr·∫°ng th√°i x√°c th·ª±c email
    async checkEmailVerificationStatus(email) {
        try {
            const user = await User.findOne({ where: { email } });
            if (!user) {
                throw new Error('Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
            }

            return {
                success: true,
                isEmailVerified: user.isEmailVerified,
                message: user.isEmailVerified ? 'Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c' : 'Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c'
            };
        } catch (error) {
            throw error;
        }
    }
}

module.exports = new OtpService();
